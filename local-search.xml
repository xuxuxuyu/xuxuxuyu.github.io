<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>实现sleep方法</title>
    <link href="/2023/09/11/%E5%AE%9E%E7%8E%B0sleep%E6%96%B9%E6%B3%95/"/>
    <url>/2023/09/11/%E5%AE%9E%E7%8E%B0sleep%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li>通过在Promise设置定时器来实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms: number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-literal">undefined</span>&gt; &#123;<br>  <span class="hljs-comment">// 参考答案</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<br>    <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">      resolve: (value: <span class="hljs-literal">undefined</span>) =&gt; <span class="hljs-keyword">void</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    </span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">undefined</span>);<br>      &#125;, ms);<br>    &#125;<br>  );<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>&#125;<br><span class="hljs-title function_">main</span>();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;&#125;;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="定时器执行后存在时间误差，因为setTimeout属于宏任务，在执行宏任务之前如果当前执行栈中在执行的任务超过了定时器设定的时间，是可能存在误差的。"><a href="#定时器执行后存在时间误差，因为setTimeout属于宏任务，在执行宏任务之前如果当前执行栈中在执行的任务超过了定时器设定的时间，是可能存在误差的。" class="headerlink" title="定时器执行后存在时间误差，因为setTimeout属于宏任务，在执行宏任务之前如果当前执行栈中在执行的任务超过了定时器设定的时间，是可能存在误差的。"></a>定时器执行后存在时间误差，因为setTimeout属于宏任务，在执行宏任务之前如果当前执行栈中在执行的任务超过了定时器设定的时间，是可能存在误差的。</h3>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>手写函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React18新特性</title>
    <link href="/2023/07/25/React18%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2023/07/25/React18%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="批处理范围扩大了"><a href="#批处理范围扩大了" class="headerlink" title="批处理范围扩大了"></a>批处理范围扩大了</h2><ol><li><p>批处理支持处理的操作范围扩大了：Promise，setTimeout，native event handlers 等这些非 React 原生的事件内部的更新也会得到合并</p><ul><li>react18之前，react会对state更新进行批处理，看例子，点击按钮时会产生两次 state 的更新，按理来说每次 state 更新都会导致一次 re-render。但是，这两次更新完全可以合成一次，从而减少无谓的 re-render 带来的性能损失。这种批处理只限于 React 原生事件内部的更新。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> [flag, setFlag] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>); <br>    <span class="hljs-title function_">setFlag</span>(<span class="hljs-function">(<span class="hljs-params">f</span>) =&gt;</span> !f);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>Next<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="createRoot"><a href="#createRoot" class="headerlink" title="createRoot"></a>createRoot</h2><p>Transition 本质上是用于一些不是很急迫的更新上，在 React 18 之前，所有的更新任务都被视为急迫的任务，在 React 18 诞生了 concurrent Mode 模式，在这个模式下，渲染是可以中断，低优先级任务，可以让高优先级的任务先更新渲染。可以说 React 18 更青睐于良好的用户体验。startTransition 依赖于 concurrent Mode 渲染并发模式。也就是说在 React 18 中使用 startTransition ，那么要先开启并发模式，也就是需要通过 createRoot 创建 Root 。我们先来看一下两种模式下，创建 Root 区别。</p><ul><li>传统模式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/* 通过 ReactDOM.render  */</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure></li><li>concurrent Mode并发模式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/* 通过 createRoot 创建 root */</span><br><span class="hljs-keyword">const</span> root =  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br><span class="hljs-comment">/* 调用 root 的 render 方法 */</span><br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h2><ol><li><p>Transitions 是 React 中一个用于区分高优更新和非高优更新的新概念。</p><ul><li>高优的更新&#x2F;渲染：包括鼠标点击、打字等对实时交互性要求很高的更新场景，卡顿时会影响用户的交互行为，使用户明显感到整个页面卡顿。</li><li>高优的更新&#x2F;渲染：普通的 UI 更新，不与用户的交互相关，一些对更新实时性要求没那么高的场景。<br> 举例 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; startTransition &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-comment">/* 高优先级任务 —— 改变搜索条件 */</span><br>    <span class="hljs-title function_">setInputValue</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>    <span class="hljs-comment">/* 低优先级任务 —— 改变搜索过滤后列表状态  */</span><br>    <span class="hljs-title function_">startTransition</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">setSearchQuery</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure> useTransition：除了能提供 startTransition 以外，还能提供一个变量来跟踪当前渲染的执行状态： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useTransition &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> [isPending, startTransition] = <span class="hljs-title function_">useTransition</span>();<br><br><span class="hljs-keyword">return</span> isPending &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span> /&gt;</span></span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>与防抖节流的区别</p><ul><li>节流防抖 本质上也是 setTimeout ，只不过控制了执行的频率，原理就是让 render 次数减少了。而 transitions 和它相比，并没有减少渲染的次数。</li><li>setTimeout 是异步延时执行，而 startTransition 的回调函数是同步执行的。在 startTransition 之中任何更新，都会标记上 transition，React 将在更新的时候，判断这个标记来决定是否完成此次更新。所以 Transition 可以理解成比 setTimeout 更早的更新。但是同时要保证 ui 的正常响应，在性能好的设备上，transition 两次更新的延迟会很小，但是在慢的设备上，延时会很大，但是不会影响 UI 的响应。</li><li>节流和防抖需要有效掌握 Delay Time 延时时间，如果时间过长，那么给人一种渲染滞后的感觉，如果时间过短，那么就类似于 setTimeout(fn,0) 还会造成前面的问题。而 startTransition 就不需要考虑这么多。</li></ul></li><li><p>原理</p><ol><li>startTransition<ul><li>原理特别简单，有点像 React17 中 batchUpdate 的批量处理逻辑。就是通过设置开关的方式，而开关就是 transition &#x3D; 1 ，然后执行更新，里面的更新任务都会获得 transtion 标志。上代码。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">startTransition</span>(<span class="hljs-params">scope</span>) &#123;<br>  <span class="hljs-keyword">const</span> prevTransition = <span class="hljs-title class_">ReactCurrentBatchConfig</span>.<span class="hljs-property">transition</span>;<br>  <span class="hljs-comment">/* 通过设置状态 */</span><br>  <span class="hljs-title class_">ReactCurrentBatchConfig</span>.<span class="hljs-property">transition</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">try</span> &#123;  <br>      <span class="hljs-comment">/* 执行更新 */</span><br>    <span class="hljs-title function_">scope</span>();<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">/* 恢复状态 */</span>  <br>    <span class="hljs-title class_">ReactCurrentBatchConfig</span>.<span class="hljs-property">transition</span> = prevTransition;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>useTranstion<ul><li><p>useTranstion 本质上就是 useState + startTransition 。<br>通过 useState 来改变 pending 状态。在 mountTransition 执行过程中，会触发两次 setPending ，一次在 transition &#x3D; 1 之前，一次在之后。一次会正常更新 setPending(true) ，一次会作为 transition 过渡任务更新 setPending(false); ，所以能够精准捕获到过渡时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mountTransition</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> [isPending, setPending] = <span class="hljs-title function_">mountState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">start</span> = (<span class="hljs-params">callback</span>)=&gt;&#123;<br>    <span class="hljs-title function_">setPending</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">const</span> prevTransition = <span class="hljs-title class_">ReactCurrentBatchConfig</span>.<span class="hljs-property">transition</span>;<br>    <span class="hljs-title class_">ReactCurrentBatchConfig</span>.<span class="hljs-property">transition</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title function_">setPending</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-title function_">callback</span>();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-title class_">ReactCurrentBatchConfig</span>.<span class="hljs-property">transition</span> = prevTransition;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> [isPending, start];<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>手写useUpdate，调用时强制组件重新渲染</title>
    <link href="/2023/07/25/%E6%89%8B%E5%86%99useUpdate%EF%BC%8C%E8%B0%83%E7%94%A8%E6%97%B6%E5%BC%BA%E5%88%B6%E7%BB%84%E4%BB%B6%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93/"/>
    <url>/2023/07/25/%E6%89%8B%E5%86%99useUpdate%EF%BC%8C%E8%B0%83%E7%94%A8%E6%97%B6%E5%BC%BA%E5%88%B6%E7%BB%84%E4%BB%B6%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useUpdate</span>(<span class="hljs-params"></span>): <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-keyword">const</span> [, update] = <span class="hljs-title function_">useReducer</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> update;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>手写函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>页面生命周期事件的理解</title>
    <link href="/2022/06/22/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2022/06/22/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML页面的生命周期包含三个重要事件"><a href="#HTML页面的生命周期包含三个重要事件" class="headerlink" title="HTML页面的生命周期包含三个重要事件"></a>HTML页面的生命周期包含三个重要事件</h2><ul><li>DOMContentLoaded——浏览器已完全加载HTML,并构建了DOM树，但像 <code>&lt;img&gt;</code> 和样式表之类的外部资源可能尚未加载完成。</li><li>load —— 浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等。</li><li>beforeunload&#x2F;unload —— 当用户正在离开页面时。</li></ul><p>每个事件都是有用的：</p><ul><li>DOMContentLoaded 事件 —— DOM 已经就绪，因此处理程序可以查找 DOM 节点，并初始化接口。</li><li>load 事件 —— 外部资源已加载完成，样式已被应用，图片大小也已知了。</li><li>beforeunload 事件 —— 用户正在离开：我们可以检查用户是否保存了更改，并询问他是否真的要离开。</li><li>unload 事件 —— 用户几乎已经离开了，但是我们仍然可以启动一些操作，例如发送统计数据。</li></ul><h2 id="DOMContentLoaded-和脚本"><a href="#DOMContentLoaded-和脚本" class="headerlink" title="DOMContentLoaded 和脚本"></a>DOMContentLoaded 和脚本</h2><p>当浏览器处理一个 HTML 文档，并在文档中遇到<code>&lt;script&gt;</code>标签时，就会在继续构建 DOM 之前运行它。这是一种防范措施，因为脚本可能想要修改 DOM，甚至对其执行 document.write 操作，所以DOMContentLoaded 必须等待脚本执行结束。因此，DOMContentLoaded 肯定在下面的这些脚本执行结束之后发生。</p><p>此规则有两个例外：</p><ul><li>具有 async 特性（attribute）的脚本不会阻塞 DOMContentLoaded，稍后 我们会讲到。</li><li>使用 document.createElement(‘script’) 动态生成并添加到网页的脚本也不会阻塞 DOMContentLoaded。</li></ul><h2 id="DOMContentLoaded-和样式"><a href="#DOMContentLoaded-和样式" class="headerlink" title="DOMContentLoaded 和样式"></a>DOMContentLoaded 和样式</h2><p>外部样式表不会影响 DOM，因此 DOMContentLoaded 不会等待它们。</p><p>但这里有一个陷阱。如果在样式后面有一个脚本，那么该脚本必须等待样式表加载完成。原因是，脚本可能想要获取元素的坐标和其他与样式相关的属性。因此，它必须等待样式加载完成。<br>当 DOMContentLoaded 等待脚本时，它现在也在等待脚本前面的样式。</p><h2 id="浏览器内建的自动填充"><a href="#浏览器内建的自动填充" class="headerlink" title="浏览器内建的自动填充"></a>浏览器内建的自动填充</h2><p>Firefox，Chrome 和 Opera 都会在 DOMContentLoaded 中自动填充表单。</p><p>例如，如果页面有一个带有登录名和密码的表单，并且浏览器记住了这些值，那么在 DOMContentLoaded 上，浏览器会尝试自动填充它们（如果得到了用户允许）。</p><p>因此，如果 DOMContentLoaded 被需要加载很长时间的脚本延迟触发，那么自动填充也会等待。你可能在某些网站上看到过（如果你使用浏览器自动填充）—— 登录名&#x2F;密码字段不会立即自动填充，而是在页面被完全加载前会延迟填充。这实际上是 DOMContentLoaded 事件之前的延迟。</p><h2 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h2><p>当整个页面，包括样式、图片和其他资源被加载完成时，会触发 window 对象上的 load 事件。可以通过 onload 属性获取此事件。</p><h2 id="window-onunload"><a href="#window-onunload" class="headerlink" title="window.onunload"></a>window.onunload</h2><p>当访问者离开页面时，window 对象上的 unload 事件就会被触发。我们可以在那里做一些不涉及延迟的操作，例如关闭相关的弹出窗口。</p><p>有一个值得注意的特殊情况是发送分析数据。</p><p>假设我们收集有关页面使用情况的数据：鼠标点击，滚动，被查看的页面区域等。</p><p>自然地，当用户要离开的时候，我们希望通过 unload 事件将数据保存到我们的服务器上。</p><p>有一个特殊的 navigator.sendBeacon(url, data) 方法可以满足这种需求，详见规范 <a href="https://w3c.github.io/beacon/%E3%80%82">https://w3c.github.io/beacon/。</a></p><p>它在后台发送数据，转换到另外一个页面不会有延迟：浏览器离开页面，但仍然在执行 sendBeacon。</p><p>当 sendBeacon 请求完成时，浏览器可能已经离开了文档，所以就无法获取服务器响应（对于分析数据来说通常为空）。</p><p>还有一个 keep-alive 标志，该标志用于在 fetch 方法中为通用的网络请求执行此类“离开页面后”的请求。你可以在 Fetch API 一章中找到更多相关信息。</p><p>如果我们要取消跳转到另一页面的操作，在这里做不到。但是我们可以使用另一个事件 —— onbeforeunload。</p><h2 id="window-onbeforeunload"><a href="#window-onbeforeunload" class="headerlink" title="window.onbeforeunload"></a>window.onbeforeunload</h2><p>如果访问者触发了离开页面的导航（navigation）或试图关闭窗口，beforeunload 处理程序将要求进行更多确认。</p><p>如果我们要取消事件，浏览器会询问用户是否确定。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>页面生命周期事件：</p><ul><li>当 DOM 准备就绪时，document 上的 DOMContentLoaded 事件就会被触发。在这个阶段，我们可以将 JavaScript 应用于元素。 诸如 <code>&lt;script&gt;</code> 或 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt; </code>之类的脚本会阻塞 DOMContentLoaded，浏览器将等待它们执行结束。</li><li>图片和其他资源仍然可以继续被加载。</li><li>当页面和所有资源都加载完成时，window 上的 load 事件就会被触发。我们很少使用它，因为通常无需等待那么长时间。</li><li>当用户想要离开页面时，window 上的 beforeunload 事件就会被触发。如果我们取消这个事件，浏览器就会询问我们是否真的要离开（例如，我们有未保存的更改）。</li><li>当用户最终离开时，window 上的 unload 事件就会被触发。在处理程序中，我们只能执行不涉及延迟或询问用户的简单操作。正是由于这个限制，它很少被使用。我们可以使用 navigator.sendBeacon 来发送网络请求。</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML, 面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖节流函数</title>
    <link href="/2022/06/16/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/"/>
    <url>/2022/06/16/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p><p>假设电梯有两种运行策略 debounce 和 throttle，超时设定为15秒，不考虑容量限制<br>电梯第一个人进来后，15秒后准时运送一次，这是节流<br>电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖</p><h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><ol><li>防抖<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doulbeTime</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">500</span></span>) &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer);<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">fn</span>();<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>利用useEffect的副作用函数实现防抖  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">fn</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>  &#125;;<br>&#125;,[text])<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>节流  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!timer) &#123;<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">fn</span>();<br>        timer = <span class="hljs-literal">null</span>;<br>      &#125;, delay);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>手写函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题</title>
    <link href="/2022/06/16/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/06/16/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li><p>HTML5 新增的一些标签</p></li><li><p>CSS3 新特性</p></li><li><p>实现垂直水平居中的几种方式 (30%)</p></li><li><p>JS 的数据类型以及区别（数据类型检测的方式 typeof instanceof constructor Object.prototype.toString.call()）</p></li><li><p>JS 的原型</p></li><li><p>JS 实现继承的方式</p></li><li><p>call,apply,bind 的区别</p></li><li><p>JS 事件监听以及事件阶段（捕获阶段、目标阶段、冒泡阶段）</p></li><li><p>阻止事件冒泡兼容 IE（event.cancelBubble &#x3D; true;）</p></li><li><p>事件委托</p></li><li><p>js 内置对象（数组、字符串常用的）</p></li><li><p>原生 ajax 对象 XMLHttpRequest，</p></li><li><p>跨域以及跨域的解决办法</p></li><li><p>es6 新增的一些</p></li><li><p>promise，实例方法</p></li><li><p>异步编程的几种方式</p></li><li><p>宏任务微任务</p></li><li><p>定时器的第二个参数时间是如何衡量的（函数只是将事件插入了任务列表，必须等到当前代码执行完，主线程才会去 执行它指定的回调函数，有可能要等很久，所以没有办法保证回调函数一定会在 setTimeout 指定的时间内执行，100 毫秒是插入队列的时间+等待的时间）</p></li><li><p>介绍防抖节流原理</p></li><li><p>JS 的垃圾回收机制</p></li><li><p>ts 中 type, interface 区别</p></li><li><p>ts 断言，非空断言</p></li><li><p>http 常见状态码（304 协商缓存）</p></li><li><p>说说地址栏输入 URL 敲下回车后发生了什么<br>URL 解析<br>DNS 查询<br>TCP 连接<br>HTTP 请求<br>响应请求<br>页面渲染</p></li><li><p>get,post 请求区别</p></li><li><p>react 生命周期</p></li><li><p>setState 异步同步</p></li><li><p>解释一下虚拟 dom</p></li><li><p>react 中 key 的作用</p></li><li><p>常用的 hooks</p></li><li><p>useMemo 和 useCallback 区别</p></li><li><p>vue 的内置指令有哪些</p></li><li><p>vue 双向绑定原理</p></li><li><p>vue 如何检测数组变化</p></li><li><p>vue 如何实现组件之间的通信<br>$parent &#x2F; $children &amp; $refs<br>Provider &#x2F; Inject<br>$attrs &#x2F; $listeners<br>Vuex<br>$emit &#x2F; $on</p></li><li><p>vue3.0 双向绑定原理</p></li><li><p>vue3.0 与 2.0 有哪些区别</p></li><li><p>前端优化<br>基于现有网页做 seo 优化方面的工作，具体如何实现的</p></li></ol><p><code>通过</code>webpack&#96;优化前端的手段有：</p><ul><li>JS 代码压缩</li><li>CSS 代码压缩</li><li>Html 文件代码压缩</li><li>文件大小压缩</li><li>图片压缩</li><li>Tree Shaking</li><li>代码分离</li><li>内联 chunk</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
